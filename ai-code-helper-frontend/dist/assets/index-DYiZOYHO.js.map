{"version":3,"file":"index-DYiZOYHO.js","sources":["../../src/api/aiClient.ts","../../src/utils/messageUtils.ts","../../src/components/ChatWindow.ts","../../src/main.ts"],"sourcesContent":["// AI Code Helper API Client\n\nimport type {\n  ChatRequest,\n  StreamChatRequest,\n  LearningReportRequest,\n  KnowledgeBaseRequest,\n  LearningReport,\n  KnowledgeBaseResult,\n\n} from '../types/api';\n\nexport class AiApiClient {\n  private baseUrl: string;\n  private abortController?: AbortController;\n\n  constructor(baseUrl: string = '/api') {\n    this.baseUrl = baseUrl;\n  }\n\n  // Basic chat endpoint\n  async chat(request: ChatRequest): Promise<string> {\n    const response = await fetch(`${this.baseUrl}/ai/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request.message),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Chat API error: ${response.statusText}`);\n    }\n\n    return response.text();\n  }\n\n  // Streaming chat with Server-Sent Events\n  async *streamChat(request: StreamChatRequest): AsyncGenerator<string, void, unknown> {\n    this.abortController = new AbortController();\n    \n    const params = new URLSearchParams({\n      message: request.message,\n      memoryId: (request.memoryId || 1).toString(),\n    });\n\n    const response = await fetch(`${this.baseUrl}/ai/chat/stream?${params}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n      },\n      signal: this.abortController.signal,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Stream API error: ${response.statusText}`);\n    }\n\n    const reader = response.body?.getReader();\n    if (!reader) {\n      throw new Error('Failed to get response reader');\n    }\n\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data:')) {\n            const data = line.slice(5); // Remove 'data:' but preserve spaces\n            if (data === '[DONE]') {\n              return;\n            }\n            if (data && data !== 'null' && data !== '') {\n              // Unescape newlines that were escaped for SSE transmission\n              const unescapedData = data.replace(/\\\\n/g, '\\n');\n              yield unescapedData;\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  // Generate learning report\n  async generateLearningReport(request: LearningReportRequest): Promise<LearningReport> {\n    const response = await fetch(`${this.baseUrl}/ai/learning-report`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message: request.message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Learning Report API error: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    \n    // Backend now returns structured JSON\n    return {\n      studentName: result.studentName || 'Student',\n      recommendations: result.recommendations || [result.error || 'No recommendations available']\n    };\n  }\n\n  // Knowledge base search\n  async searchKnowledgeBase(request: KnowledgeBaseRequest): Promise<KnowledgeBaseResult> {\n    const response = await fetch(`${this.baseUrl}/ai/chat/knowledge`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message: request.message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Knowledge Base API error: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n    \n    // Backend now returns structured JSON with content and sources\n    return {\n      content: result.content || result.error || 'No response',\n      sources: result.sources || []\n    };\n  }\n\n  // Health check\n  async healthCheck(): Promise<string> {\n    const response = await fetch(`${this.baseUrl}/ai/health`, {\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error(`Health check failed: ${response.statusText}`);\n    }\n\n    return response.text();\n  }\n\n  // Cancel ongoing stream\n  cancelStream(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n      this.abortController = undefined;\n    }\n  }\n\n  // Test connection\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.healthCheck();\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const aiApiClient = new AiApiClient();","// Utility functions for message handling\r\n\r\nimport type { ChatMessage } from '../types/api';\r\n\r\nexport function createMessage(\r\n  sender: 'user' | 'ai' | 'system',\r\n  content: string,\r\n  type: 'chat' | 'report' | 'knowledge' | 'error' = 'chat'\r\n): ChatMessage {\r\n  return {\r\n    id: generateMessageId(),\r\n    sender,\r\n    content,\r\n    timestamp: new Date(),\r\n    type\r\n  };\r\n}\r\n\r\nexport function generateMessageId(): string {\r\n  return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\n\r\nexport function formatTimestamp(date: Date): string {\r\n  return date.toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: '2-digit',\r\n    hour12: true\r\n  });\r\n}\r\n\r\nexport function getSenderLabel(sender: 'user' | 'ai' | 'system'): string {\r\n  switch (sender) {\r\n    case 'user':\r\n      return '[USER] You';\r\n    case 'ai':\r\n      return '[AI] Assistant';\r\n    case 'system':\r\n      return '[SYSTEM] Info';\r\n    default:\r\n      return '[UNKNOWN]';\r\n  }\r\n}\r\n\r\nexport function truncateText(text: string, maxLength: number = 50): string {\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n}\r\n\r\nexport function sanitizeInput(input: string): string {\r\n  return input.trim().replace(/\\s+/g, ' ');\r\n}\r\n\r\nexport function isValidMessage(message: string): boolean {\r\n  return message.trim().length > 0 && message.trim().length <= 4000;\r\n}\r\n\r\n// Windows 95 style message formatting\r\nexport function formatLearningReport(report: { studentName: string; recommendations: string[] }): string {\r\n  let formatted = `Learning Report for: ${report.studentName}\\n\\n`;\r\n  \r\n  report.recommendations.forEach((recommendation, index) => {\r\n    formatted += `${index + 1}. ${recommendation}\\n`;\r\n  });\r\n  \r\n  return formatted;\r\n}\r\n\r\nexport function createSystemWelcomeMessage(): ChatMessage {\r\n  return createMessage(\r\n    'system',\r\n    'Welcome to AI Code Helper! I\\'m your programming assistant specialized in helping with learning, career guidance, and interview preparation. How can I help you today?',\r\n    'chat'\r\n  );\r\n}","// Windows 95 Style Chat Window Component\n\nimport type { ChatMessage, ChatSession, AppSettings } from '../types/api';\nimport { aiApiClient } from '../api/aiClient';\nimport { createMessage, formatTimestamp, getSenderLabel, createSystemWelcomeMessage } from '../utils/messageUtils';\n\nexport class ChatWindow {\n  private container: HTMLElement;\n  private chatDisplay!: HTMLElement;\n  private messageInput!: HTMLTextAreaElement;\n  private sendButton!: HTMLButtonElement;\n  private currentSession: ChatSession;\n  private settings: AppSettings;\n  private isStreaming = false;\n\n  constructor(container: HTMLElement) {\n    this.container = container;\n    this.currentSession = this.createNewSession();\n    this.settings = this.loadSettings();\n    this.init();\n  }\n\n  private init(): void {\n    this.render();\n    this.attachEventListeners();\n    this.addMessage(createSystemWelcomeMessage());\n    this.loadChatHistory();\n    this.testConnection();\n  }\n\n  private createNewSession(): ChatSession {\n    return {\n      id: `session_${Date.now()}`,\n      title: 'New Chat Session',\n      messages: [],\n      lastActivity: new Date(),\n      type: 'general'\n    };\n  }\n\n  private loadSettings(): AppSettings {\n    const saved = localStorage.getItem('ai-helper-settings');\n    return saved ? JSON.parse(saved) : {\n      autoSave: true,\n      enableNotifications: false,\n      showTimestamps: true,\n      theme: 'windows95'\n    };\n  }\n\n  private render(): void {\n    this.container.innerHTML = `\n      <!-- Desktop Background -->\n      <div class=\"desktop\">\n        <!-- Taskbar -->\n        <div class=\"taskbar\">\n          <button class=\"start-button\">Start</button>\n          <div class=\"task-buttons\">\n            <button class=\"task-button active\">AI Code Helper</button>\n          </div>\n          <div class=\"system-tray\">\n            <span class=\"time\" id=\"currentTime\">12:00 PM</span>\n          </div>\n        </div>\n\n        <!-- Main Application Window -->\n        <div class=\"window\" id=\"mainWindow\">\n          <!-- Title Bar -->\n          <div class=\"title-bar\">\n            <div class=\"title-bar-text\">AI Code Helper - Programming Assistant</div>\n            <div class=\"title-bar-controls\">\n              <button class=\"title-bar-control\" id=\"minimize\">_</button>\n              <button class=\"title-bar-control\" id=\"maximize\">□</button>\n              <button class=\"title-bar-control close\" id=\"close\">×</button>\n            </div>\n          </div>\n\n          <!-- Menu Bar -->\n          <div class=\"menu-bar\">\n            <button class=\"menu-item\">File</button>\n            <button class=\"menu-item\">Edit</button>\n            <button class=\"menu-item\">AI Tools</button>\n            <button class=\"menu-item\">Help</button>\n          </div>\n\n          <!-- Toolbar -->\n          <div class=\"toolbar\">\n            <button class=\"toolbar-button\" id=\"newChatBtn\" title=\"New Chat\">\n              <span class=\"icon-text\">NEW</span>\n            </button>\n            <button class=\"toolbar-button\" id=\"saveChatBtn\" title=\"Save Conversation\">\n              <span class=\"icon-text\">SAVE</span>\n            </button>\n            <div class=\"toolbar-separator\"></div>\n            <button class=\"toolbar-button\" id=\"reportBtn\" title=\"Learning Report\">\n              <span class=\"icon-text\">RPT</span>\n            </button>\n            <button class=\"toolbar-button\" id=\"questionsBtn\" title=\"Interview Questions\">\n              <span class=\"icon-text\">Q&A</span>\n            </button>\n            <button class=\"toolbar-button\" id=\"knowledgeBtn\" title=\"Knowledge Base\">\n              <span class=\"icon-text\">KB</span>\n            </button>\n          </div>\n\n          <!-- Main Content Area -->\n          <div class=\"content-area\">\n            <!-- Chat Display -->\n            <div class=\"chat-panel\">\n              <div class=\"chat-display\" id=\"chatDisplay\">\n                <!-- Messages will be added here -->\n              </div>\n\n              <!-- Input Area -->\n              <div class=\"input-panel\">\n                <div class=\"input-container\">\n                  <textarea class=\"message-input\" id=\"messageInput\" \n                           placeholder=\"Type your message here...\" \n                           rows=\"3\"></textarea>\n                  <div class=\"input-controls\">\n                    <button class=\"send-button\" id=\"sendBtn\">Send</button>\n                    <button class=\"ai-function-button\" id=\"chatBtn\">Chat</button>\n                    <button class=\"ai-function-button\" id=\"reportBtn2\">Report</button>\n                    <button class=\"ai-function-button\" id=\"searchBtn\">Search</button>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <!-- Sidebar -->\n            <div class=\"sidebar\">\n              <div class=\"panel\">\n                <div class=\"panel-header\">Quick Actions</div>\n                <div class=\"panel-content\">\n                  <button class=\"action-button\" id=\"newChatAction\">* Start New Chat</button>\n                  <button class=\"action-button\" id=\"reportAction\">* Generate Learning Report</button>\n                  <button class=\"action-button\" id=\"questionsAction\">* Get Interview Questions</button>\n                  <button class=\"action-button\" id=\"knowledgeAction\">* Search Knowledge Base</button>\n                </div>\n              </div>\n\n              <div class=\"panel\">\n                <div class=\"panel-header\">Chat History</div>\n                <div class=\"panel-content\" id=\"chatHistory\">\n                  <div class=\"chat-history-item active\">Current Session</div>\n                </div>\n              </div>\n\n              <div class=\"panel\">\n                <div class=\"panel-header\">Settings</div>\n                <div class=\"panel-content\">\n                  <label class=\"checkbox-label\">\n                    <input type=\"checkbox\" id=\"autoSave\" ${this.settings.autoSave ? 'checked' : ''}> \n                    Auto-save conversations\n                  </label>\n                  <label class=\"checkbox-label\">\n                    <input type=\"checkbox\" id=\"enableNotifications\" ${this.settings.enableNotifications ? 'checked' : ''}> \n                    Enable notifications\n                  </label>\n                  <label class=\"checkbox-label\">\n                    <input type=\"checkbox\" id=\"showTimestamps\" ${this.settings.showTimestamps ? 'checked' : ''}> \n                    Show timestamps\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Status Bar -->\n          <div class=\"status-bar\">\n            <div class=\"status-section\" id=\"connectionStatus\">Connecting...</div>\n            <div class=\"status-section\" id=\"aiStatus\">AI Service Status</div>\n            <div class=\"status-section\" id=\"memoryStatus\">Memory: 0/10 messages</div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Get references to important elements\n    this.chatDisplay = this.container.querySelector('#chatDisplay')!;\n    this.messageInput = this.container.querySelector('#messageInput')!;\n    this.sendButton = this.container.querySelector('#sendBtn')!;\n\n    // Update time every second\n    this.updateTime();\n    setInterval(() => this.updateTime(), 1000);\n  }\n\n  private attachEventListeners(): void {\n    // Send message\n    this.sendButton.addEventListener('click', () => this.sendMessage());\n    this.messageInput.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.sendMessage();\n      }\n    });\n\n    // AI Function buttons\n    this.container.querySelector('#chatBtn')?.addEventListener('click', () => this.sendMessage('chat'));\n    this.container.querySelector('#reportBtn2')?.addEventListener('click', () => {\n      if (!this.messageInput.value.trim()) {\n        this.messageInput.value = \"Please create a learning report for me. I am a programmer who wants to improve my skills.\";\n      }\n      this.sendMessage('report');\n    });\n    this.container.querySelector('#searchBtn')?.addEventListener('click', () => {\n      if (!this.messageInput.value.trim()) {\n        this.messageInput.value = \"What are the best practices for software development?\";\n      }\n      this.sendMessage('knowledge');\n    });\n\n    // Toolbar buttons\n    this.container.querySelector('#newChatBtn')?.addEventListener('click', () => this.newChat());\n    this.container.querySelector('#saveChatBtn')?.addEventListener('click', () => this.saveChat());\n    this.container.querySelector('#reportBtn')?.addEventListener('click', () => {\n      const reportPrompt = \"Please create a learning report for me. I am a programmer who wants to improve my skills.\";\n      this.messageInput.value = reportPrompt;\n      this.sendMessage('report');\n    });\n    this.container.querySelector('#questionsBtn')?.addEventListener('click', () => this.getInterviewQuestions());\n    this.container.querySelector('#knowledgeBtn')?.addEventListener('click', () => {\n      const knowledgePrompt = \"What are the best practices for software development?\";\n      this.messageInput.value = knowledgePrompt;\n      this.sendMessage('knowledge');\n    });\n\n    // Quick action buttons\n    this.container.querySelector('#newChatAction')?.addEventListener('click', () => this.newChat());\n    this.container.querySelector('#reportAction')?.addEventListener('click', () => {\n      const reportPrompt = \"Please create a learning report for me. I am a programmer who wants to improve my skills.\";\n      this.messageInput.value = reportPrompt;\n      this.sendMessage('report');\n    });\n    this.container.querySelector('#questionsAction')?.addEventListener('click', () => this.getInterviewQuestions());\n    this.container.querySelector('#knowledgeAction')?.addEventListener('click', () => {\n      const knowledgePrompt = \"What are the best practices for software development?\";\n      this.messageInput.value = knowledgePrompt;\n      this.sendMessage('knowledge');\n    });\n\n    // Settings\n    this.container.querySelector('#autoSave')?.addEventListener('change', (e) => {\n      this.settings.autoSave = (e.target as HTMLInputElement).checked;\n      this.saveSettings();\n    });\n    this.container.querySelector('#enableNotifications')?.addEventListener('change', (e) => {\n      this.settings.enableNotifications = (e.target as HTMLInputElement).checked;\n      this.saveSettings();\n    });\n    this.container.querySelector('#showTimestamps')?.addEventListener('change', (e) => {\n      this.settings.showTimestamps = (e.target as HTMLInputElement).checked;\n      this.saveSettings();\n      this.refreshMessages();\n    });\n\n    // Window controls\n    this.container.querySelector('#minimize')?.addEventListener('click', () => this.minimizeWindow());\n    this.container.querySelector('#maximize')?.addEventListener('click', () => this.maximizeWindow());\n    this.container.querySelector('#close')?.addEventListener('click', () => this.closeWindow());\n  }\n\n  private updateTime(): void {\n    const timeElement = this.container.querySelector('#currentTime');\n    if (timeElement) {\n      timeElement.textContent = new Date().toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n    }\n  }\n\n  private async sendMessage(type: 'chat' | 'report' | 'knowledge' = 'chat'): Promise<void> {\n    const message = this.messageInput.value.trim();\n    if (!message || this.isStreaming) return;\n\n    // Add user message\n    this.addMessage(createMessage('user', message));\n    this.messageInput.value = '';\n    this.isStreaming = true;\n    this.updateSendButton(false);\n\n    try {\n      switch (type) {\n        case 'chat':\n          await this.handleStreamingChat(message);\n          break;\n        case 'report':\n          await this.handleLearningReport(message);\n          break;\n        case 'knowledge':\n          await this.handleKnowledgeBase(message);\n          break;\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      this.addMessage(createMessage('system', `Error: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error'));\n    } finally {\n      this.isStreaming = false;\n      this.updateSendButton(true);\n      this.updateMemoryStatus();\n    }\n  }\n\n  private async handleStreamingChat(message: string): Promise<void> {\n    let aiResponse = '';\n    const aiMessage = createMessage('ai', '', 'chat');\n    this.addMessage(aiMessage);\n\n    try {\n      for await (const chunk of aiApiClient.streamChat({ message, memoryId: 1 })) {\n        console.debug('Received chunk:', JSON.stringify(chunk));\n        aiResponse += chunk;\n        this.updateMessage(aiMessage.id, aiResponse);\n      }\n    } catch (error) {\n      console.error('Streaming error:', error);\n      this.updateMessage(aiMessage.id, 'Error: Failed to get AI response');\n    }\n  }\n\n  private async handleLearningReport(message: string): Promise<void> {\n    try {\n      const report = await aiApiClient.generateLearningReport({ message });\n      const formattedReport = `Learning Report for: ${report.studentName}\\n\\n` +\n        report.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\\n');\n      \n      this.addMessage(createMessage('ai', formattedReport, 'report'));\n    } catch (error) {\n      console.error('Learning report error:', error);\n      this.addMessage(createMessage('system', `Error generating learning report: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error'));\n    }\n  }\n\n  private async handleKnowledgeBase(message: string): Promise<void> {\n    try {\n      const result = await aiApiClient.searchKnowledgeBase({ message });\n      this.addMessage(createMessage('ai', result.content, 'knowledge'));\n    } catch (error) {\n      console.error('Knowledge base error:', error);\n      this.addMessage(createMessage('system', `Error searching knowledge base: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error'));\n    }\n  }\n\n  private addMessage(message: ChatMessage): void {\n    this.currentSession.messages.push(message);\n    this.renderMessage(message);\n    this.scrollToBottom();\n    if (this.settings.autoSave && message.sender !== 'system') {\n      this.saveSession();\n    }\n  }\n\n  private renderMessage(message: ChatMessage): void {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${message.sender}-message`;\n    messageDiv.setAttribute('data-message-id', message.id);\n\n    const timestampDisplay = this.settings.showTimestamps ? \n      `<span class=\"message-time\">${formatTimestamp(message.timestamp)}</span>` : '';\n\n    messageDiv.innerHTML = `\n      <div class=\"message-header\">\n        <span class=\"message-sender\">${getSenderLabel(message.sender)}</span>\n        ${timestampDisplay}\n      </div>\n      <div class=\"message-content\">${this.formatMessageContent(message.content)}</div>\n    `;\n\n    this.chatDisplay.appendChild(messageDiv);\n  }\n\n  private updateMessage(messageId: string, content: string): void {\n    const messageElement = this.chatDisplay.querySelector(`[data-message-id=\"${messageId}\"]`);\n    if (messageElement) {\n      const contentElement = messageElement.querySelector('.message-content');\n      if (contentElement) {\n        contentElement.innerHTML = this.formatMessageContent(content);\n      }\n    }\n\n    // Update in session data\n    const message = this.currentSession.messages.find(m => m.id === messageId);\n    if (message) {\n      message.content = content;\n    }\n  }\n\n  private formatMessageContent(content: string): string {\n    // Enhanced formatting with code block support\n    return content\n      // Handle code blocks (```code```)\n      .replace(/```(\\w+)?\\n?([\\s\\S]*?)```/g, (_, language, code) => {\n        const lang = language || 'text';\n        const codeId = 'code_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n        const formattedCode = this.formatCodeContent(code);\n        return `<div class=\"code-block\">\n          <div class=\"code-block-header\">\n            <span class=\"code-language\">${lang}</span>\n            <button class=\"copy-button\" onclick=\"window.chatWindow.copyCode('${codeId}')\" title=\"Copy code to clipboard\">\n              <span class=\"copy-icon\">[]</span>\n              <span class=\"copy-text\">COPY</span>\n            </button>\n          </div>\n          <pre class=\"code-block-content\"><code id=\"${codeId}\">${this.escapeHtml(formattedCode)}</code></pre>\n        </div>`;\n      })\n      // Handle inline code (`code`)\n      .replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>')\n      // Handle bold text\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n      // Handle italic text\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n      // Handle newlines (after code blocks to avoid breaking them)\n      .replace(/\\n/g, '<br>');\n  }\n\n  private escapeHtml(text: string): string {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  private formatCodeContent(code: string): string {\n    // Simple cleanup - preserve structure from backend\n    return code\n      .trim()\n      // Normalize line endings only\n      .replace(/\\r\\n/g, '\\n')\n      .replace(/\\r/g, '\\n');\n  }\n\n  public copyCode(codeId: string): void {\n    const codeElement = document.getElementById(codeId);\n    if (!codeElement) return;\n\n    const codeText = codeElement.textContent || '';\n    \n    // Try to use the modern clipboard API first\n    if (navigator.clipboard && window.isSecureContext) {\n      navigator.clipboard.writeText(codeText).then(() => {\n        this.showCopyFeedback(codeId, true);\n      }).catch(() => {\n        // Fallback to the older method\n        this.fallbackCopyText(codeText, codeId);\n      });\n    } else {\n      // Fallback for older browsers or non-secure contexts\n      this.fallbackCopyText(codeText, codeId);\n    }\n  }\n\n  private fallbackCopyText(text: string, codeId: string): void {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-999999px';\n    textArea.style.top = '-999999px';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    \n    try {\n      const successful = document.execCommand('copy');\n      this.showCopyFeedback(codeId, successful);\n    } catch (err) {\n      console.error('Failed to copy code:', err);\n      this.showCopyFeedback(codeId, false);\n    } finally {\n      document.body.removeChild(textArea);\n    }\n  }\n\n  private showCopyFeedback(codeId: string, success: boolean): void {\n    const codeElement = document.getElementById(codeId);\n    if (!codeElement) return;\n\n    const codeBlock = codeElement.closest('.code-block');\n    if (!codeBlock) return;\n\n    const copyButton = codeBlock.querySelector('.copy-button');\n    if (!copyButton) return;\n\n    const copyText = copyButton.querySelector('.copy-text');\n    if (!copyText) return;\n\n    const originalText = copyText.textContent;\n    const originalIcon = copyButton.querySelector('.copy-icon');\n    const originalIconText = originalIcon ? originalIcon.textContent : '[]';\n    \n    if (success) {\n      copyText.textContent = 'OK';\n      if (originalIcon) originalIcon.textContent = '✓';\n      copyButton.classList.add('copy-success');\n    } else {\n      copyText.textContent = 'ERR';\n      if (originalIcon) originalIcon.textContent = '✗';\n      copyButton.classList.add('copy-error');\n    }\n\n    setTimeout(() => {\n      copyText.textContent = originalText;\n      if (originalIcon) originalIcon.textContent = originalIconText;\n      copyButton.classList.remove('copy-success', 'copy-error');\n    }, 1500);\n  }\n\n  private scrollToBottom(): void {\n    this.chatDisplay.scrollTop = this.chatDisplay.scrollHeight;\n  }\n\n  private updateSendButton(enabled: boolean): void {\n    this.sendButton.disabled = !enabled;\n    this.sendButton.textContent = enabled ? 'Send' : 'Sending...';\n  }\n\n  private updateMemoryStatus(): void {\n    const statusElement = this.container.querySelector('#memoryStatus');\n    if (statusElement) {\n      statusElement.textContent = `Memory: ${this.currentSession.messages.length}/10 messages`;\n    }\n  }\n\n  private async testConnection(): Promise<void> {\n    const statusElement = this.container.querySelector('#connectionStatus');\n    if (!statusElement) return;\n\n    try {\n      const isConnected = await aiApiClient.testConnection();\n      statusElement.textContent = isConnected ? 'Connected' : 'Disconnected';\n      statusElement.className = isConnected ? 'status-section connected' : 'status-section disconnected';\n    } catch (error) {\n      statusElement.textContent = 'Connection Error';\n      statusElement.className = 'status-section error';\n    }\n  }\n\n  private newChat(): void {\n    // Save current session if it has messages\n    if (this.currentSession.messages.length > 1) { // > 1 to skip welcome message\n      this.saveSession();\n    }\n    \n    this.currentSession = this.createNewSession();\n    this.chatDisplay.innerHTML = '';\n    this.addMessage(createSystemWelcomeMessage());\n    this.updateMemoryStatus();\n    this.updateChatHistory();\n  }\n\n  private saveChat(): void {\n    this.saveSession();\n    this.addMessage(createMessage('system', 'Chat session saved successfully!'));\n  }\n\n  private async getInterviewQuestions(): Promise<void> {\n    const questionsPrompt = \"Please provide 5 common programming interview questions with brief explanations for each answer.\";\n    this.messageInput.value = questionsPrompt;\n    await this.sendMessage('chat');\n  }\n\n  private saveSession(): void {\n    // Update session title from first user message if still default\n    if (this.currentSession.title === 'New Chat Session' && this.currentSession.messages.length > 0) {\n      const firstUserMessage = this.currentSession.messages.find(m => m.sender === 'user');\n      if (firstUserMessage) {\n        this.currentSession.title = firstUserMessage.content.substring(0, 50) + \n          (firstUserMessage.content.length > 50 ? '...' : '');\n      }\n    }\n    \n    this.currentSession.lastActivity = new Date();\n    localStorage.setItem(`session_${this.currentSession.id}`, JSON.stringify(this.currentSession));\n    this.updateChatHistory();\n  }\n\n  private loadChatHistory(): void {\n    const historyContainer = this.container.querySelector('#chatHistory');\n    if (!historyContainer) return;\n\n    // Get all saved sessions from localStorage\n    const savedSessions: ChatSession[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key?.startsWith('session_')) {\n        try {\n          const session = JSON.parse(localStorage.getItem(key)!);\n          // Convert date strings back to Date objects\n          session.lastActivity = new Date(session.lastActivity);\n          session.messages.forEach((msg: ChatMessage) => {\n            msg.timestamp = new Date(msg.timestamp);\n          });\n          savedSessions.push(session);\n        } catch (error) {\n          console.warn('Failed to load session:', key, error);\n        }\n      }\n    }\n\n    // Sort by last activity (newest first)\n    savedSessions.sort((a, b) => b.lastActivity.getTime() - a.lastActivity.getTime());\n\n    // Render chat history\n    this.renderChatHistory(savedSessions);\n  }\n\n  private renderChatHistory(sessions: ChatSession[]): void {\n    const historyContainer = this.container.querySelector('#chatHistory');\n    if (!historyContainer) return;\n\n    historyContainer.innerHTML = '';\n\n    // Add current session\n    const currentItem = document.createElement('div');\n    currentItem.className = 'chat-history-item active';\n    currentItem.innerHTML = `\n      <div class=\"history-item-content\">\n        <div class=\"history-item-title\">Current Session</div>\n        <div class=\"history-item-date\">Active now</div>\n        <div class=\"history-item-count\">${this.currentSession.messages.length} messages</div>\n      </div>\n    `;\n    \n    const currentContentArea = currentItem.querySelector('.history-item-content');\n    currentContentArea?.addEventListener('click', () => {\n      // Already current session, just scroll to top\n      this.scrollToTop();\n    });\n    historyContainer.appendChild(currentItem);\n\n    // Add saved sessions\n    sessions.forEach(session => {\n      if (session.id === this.currentSession.id) return; // Skip current session\n\n      const item = document.createElement('div');\n      item.className = 'chat-history-item';\n      item.innerHTML = `\n        <div class=\"history-item-content\">\n          <div class=\"history-item-title\">${session.title}</div>\n          <div class=\"history-item-date\">${this.formatDate(session.lastActivity)}</div>\n          <div class=\"history-item-count\">${session.messages.length} messages</div>\n        </div>\n        <button class=\"history-delete-btn\" title=\"Delete this chat session\">×</button>\n      `;\n      \n      // Add click handler for the main item (excluding delete button)\n      const contentArea = item.querySelector('.history-item-content');\n      contentArea?.addEventListener('click', (event) => this.loadSession(session, event.target as HTMLElement));\n      \n      // Add delete handler for the delete button\n      const deleteBtn = item.querySelector('.history-delete-btn');\n      deleteBtn?.addEventListener('click', (event) => {\n        event.stopPropagation(); // Prevent triggering loadSession\n        this.deleteChatSession(session);\n      });\n      \n      historyContainer.appendChild(item);\n    });\n\n    // Add delete all button if there are saved sessions\n    if (sessions.length > 0) {\n      const clearButton = document.createElement('button');\n      clearButton.className = 'history-clear-button';\n      clearButton.textContent = 'Clear History';\n      clearButton.addEventListener('click', () => this.clearChatHistory());\n      historyContainer.appendChild(clearButton);\n    }\n  }\n\n  private updateChatHistory(): void {\n    this.loadChatHistory(); // Reload and re-render\n  }\n\n  private loadSession(session: ChatSession, clickedElement?: HTMLElement): void {\n    // Save current session first if it has messages\n    if (this.currentSession.messages.length > 1) { // > 1 to skip welcome message\n      this.saveSession();\n    }\n\n    // Load the selected session\n    this.currentSession = session;\n    this.renderMessages();\n    \n    // Update active state in history\n    this.container.querySelectorAll('.chat-history-item').forEach(item => {\n      item.classList.remove('active');\n    });\n    \n    // Mark the clicked item as active\n    if (clickedElement) {\n      const historyItem = clickedElement.closest('.chat-history-item');\n      historyItem?.classList.add('active');\n    }\n    \n    this.updateMemoryStatus();\n    this.scrollToBottom();\n  }\n\n  private renderMessages(): void {\n    this.chatDisplay.innerHTML = '';\n    this.currentSession.messages.forEach(message => this.renderMessage(message));\n  }\n\n  private deleteChatSession(session: ChatSession): void {\n    if (confirm(`Delete chat session \"${session.title}\"? This cannot be undone.`)) {\n      // Remove the specific session from localStorage\n      localStorage.removeItem(`session_${session.id}`);\n      \n      // If this was the current session, create a new one\n      if (session.id === this.currentSession.id) {\n        this.currentSession = this.createNewSession();\n        this.chatDisplay.innerHTML = '';\n        this.addMessage(createSystemWelcomeMessage());\n        this.updateMemoryStatus();\n      }\n      \n      // Refresh history display\n      this.loadChatHistory();\n      \n      this.addMessage(createMessage('system', `Chat session \"${session.title}\" deleted successfully!`));\n    }\n  }\n\n  private clearChatHistory(): void {\n    if (confirm('Are you sure you want to clear all chat history? This cannot be undone.')) {\n      // Remove all session data from localStorage\n      const keysToRemove: string[] = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('session_')) {\n          keysToRemove.push(key);\n        }\n      }\n      \n      keysToRemove.forEach(key => localStorage.removeItem(key));\n      \n      // Refresh history display\n      this.loadChatHistory();\n      \n      this.addMessage(createMessage('system', 'Chat history cleared successfully!'));\n    }\n  }\n\n  private formatDate(date: Date): string {\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) {\n      return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });\n    } else if (diffDays === 1) {\n      return 'Yesterday';\n    } else if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    } else {\n      return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n    }\n  }\n\n  private scrollToTop(): void {\n    this.chatDisplay.scrollTop = 0;\n  }\n\n  private saveSettings(): void {\n    localStorage.setItem('ai-helper-settings', JSON.stringify(this.settings));\n  }\n\n  private refreshMessages(): void {\n    this.chatDisplay.innerHTML = '';\n    this.currentSession.messages.forEach(message => this.renderMessage(message));\n  }\n\n  private minimizeWindow(): void {\n    const window = this.container.querySelector('.window') as HTMLElement;\n    if (window) {\n      window.style.display = 'none';\n      this.addMessage(createMessage('system', 'Window minimized. Click taskbar to restore.'));\n      // Simulate taskbar behavior - restore after 3 seconds\n      setTimeout(() => {\n        window.style.display = 'flex';\n        this.addMessage(createMessage('system', 'Window restored.'));\n      }, 3000);\n    }\n  }\n\n  private maximizeWindow(): void {\n    const window = this.container.querySelector('.window') as HTMLElement;\n    if (window) {\n      // Toggle between maximized and normal\n      if (window.style.width === '100%') {\n        window.style.width = '96%';\n        window.style.height = '94%';\n        window.style.top = '2%';\n        window.style.left = '2%';\n        this.addMessage(createMessage('system', 'Window restored to normal size.'));\n      } else {\n        window.style.width = '100%';\n        window.style.height = '100%';\n        window.style.top = '0';\n        window.style.left = '0';\n        this.addMessage(createMessage('system', 'Window maximized.'));\n      }\n    }\n  }\n\n  private closeWindow(): void {\n    if (confirm('Are you sure you want to close AI Code Helper?')) {\n      this.addMessage(createMessage('system', 'Thank you for using AI Code Helper! 👋'));\n      setTimeout(() => {\n        window.close();\n      }, 1000);\n    }\n  }\n}","// AI Code Helper - Main TypeScript Entry Point\r\n\r\nimport './styles/win95-style.css';\r\nimport './styles/win95-icons.css';\r\nimport { ChatWindow } from './components/ChatWindow';\r\n\r\n// Initialize the application when DOM is loaded\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const appContainer = document.getElementById('app');\r\n  \r\n  if (!appContainer) {\r\n    console.error('App container not found!');\r\n    return;\r\n  }\r\n\r\n  // Create and initialize the chat window\r\n  try {\r\n    const chatWindow = new ChatWindow(appContainer);\r\n    \r\n    // Make chatWindow available globally for copy functionality\r\n    (window as any).chatWindow = chatWindow;\r\n    \r\n    console.log('AI Code Helper initialized successfully');\r\n    \r\n    // Global error handling\r\n    window.addEventListener('error', (event) => {\r\n      console.error('Global error:', event.error);\r\n    });\r\n\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      console.error('Unhandled promise rejection:', event.reason);\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Failed to initialize AI Code Helper:', error);\r\n    appContainer.innerHTML = `\r\n      <div style=\"padding: 20px; color: red; font-family: 'MS Sans Serif', sans-serif;\">\r\n        <h3>Error: Failed to load AI Code Helper</h3>\r\n        <p>Please refresh the page or check the console for more details.</p>\r\n        <pre>${error instanceof Error ? error.message : String(error)}</pre>\r\n      </div>\r\n    `;\r\n  }\r\n});\r\n\r\n// Hot module replacement for development\r\nif ((import.meta as any).hot) {\r\n  (import.meta as any).hot.accept();\r\n}"],"names":["AiApiClient","baseUrl","request","response","params","reader","decoder","buffer","done","value","lines","line","data","result","error","aiApiClient","createMessage","sender","content","type","generateMessageId","formatTimestamp","date","getSenderLabel","createSystemWelcomeMessage","ChatWindow","container","saved","reportPrompt","knowledgePrompt","timeElement","message","aiResponse","aiMessage","chunk","report","formattedReport","rec","messageDiv","timestampDisplay","messageId","messageElement","contentElement","m","_","language","code","lang","codeId","formattedCode","text","div","codeElement","codeText","textArea","successful","err","success","codeBlock","copyButton","copyText","originalText","originalIcon","originalIconText","enabled","statusElement","isConnected","questionsPrompt","firstUserMessage","savedSessions","i","key","session","msg","a","b","sessions","historyContainer","currentItem","item","event","clearButton","clickedElement","keysToRemove","diffMs","diffDays","window","appContainer","chatWindow"],"mappings":"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"}